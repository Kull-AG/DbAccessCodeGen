using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
using System.Threading.Tasks;

namespace {{Name.Namespace}} 
{
	{{ServiceClassModifiers}} class {{Name.Name}}
	{
		protected readonly DbConnection connection;
        protected readonly bool isMSSqlServer;

		{{ConstructorVisibility}} {{Name.Name}}(DbConnection connection)
		{
			this.connection = connection;
            this.isMSSqlServer = connection.GetType().FullName.StartsWith("System.Data.SqlClient")
                || connection.GetType().FullName.StartsWith("Microsoft.Data.SqlClient");
		}

		partial void OnCommandStart(DbCommand cmd, DateTime startedAtUtc);
		partial void OnCommandEnd(DbCommand cmd, DateTime startedAtUtc);

        protected void SetupConnection()
        {
            if(connection.State != ConnectionState.Open) 
	        {
		        connection.Open();
	        }
        }

        protected async Task SetupConnectionAsync()
        {
            if(connection.State != ConnectionState.Open) 
	        {
		        await connection.OpenAsync();
	        }
        }

        protected void AddCommandParameter<T>(DbCommand cmd, string name, T value, ParameterDirection direction = ParameterDirection.Input) 
        {
		    var prm = cmd.CreateParameter();
            prm.Direction = direction;
            prm.ParameterName = (isMSSqlServer && !name.StartsWith("@") ? "@" : "") +  name;
            prm.Value = (value as object) ?? DBNull.Value;
            
            if(value is System.IO.Stream)
            {
                prm.DbType = DbType.Binary;
                prm.Size = -1;
            }
            else if (typeof(T) == typeof(byte[]) || value is byte[])
            {
                prm.DbType = DbType.Binary;
            }
            cmd.Parameters.Add(prm);
        }

        protected Dictionary<string, object?> ReadDictionary(IDataRecord record, int fieldCount) 
        {
            Dictionary<string, object?> rowData = new Dictionary<string, object?>(fieldCount);
            for(int i = 0; i<fieldCount; i++) 
            {
                rowData[record.GetName(i)] = record.IsDBNull(i) ? (object?)null : record.GetValue(i);
            }
            return rowData;
        }
        
        protected void AddTableValuedCommandParameter<T>(DbCommand cmd, string sqlName, IEnumerable<T>? parameterValue, (string fieldName, Type netType)[] fields, Func<T, object[]> getRowData)
        {
            var p = cmd.CreateParameter();
            p.ParameterName = sqlName;
            if (parameterValue == null)
            {
                p.Value = DBNull.Value;
                cmd.Parameters.Add(p);
                return;
            }

            System.Data.DataTable dt;
            dt = new System.Data.DataTable();
            foreach (var col in fields)
            {
                dt.Columns.Add(col.fieldName, col.netType);
            }
            foreach(var row in parameterValue)
            {
                var rowData = getRowData(row);
                dt.Rows.Add(rowData);
            }
            p.Value = dt;
            if (p.GetType().FullName == "System.Data.SqlClient.SqlParameter" ||
                            p.GetType().FullName == "Microsoft.Data.SqlClient.SqlParameter")
            {

                // Reflection set SqlDbType in order to avoid 
                // referecnting the deprecated SqlClient Nuget Package or the too new Microsoft SqlClient package

                // see https://devblogs.microsoft.com/dotnet/introducing-the-new-microsoftdatasqlclient/

                // cmdPrm.SqlDbType = System.Data.SqlDbType.Structured;
                p.GetType().GetProperty("SqlDbType", System.Reflection.BindingFlags.Public |
                    System.Reflection.BindingFlags.Instance |
                    System.Reflection.BindingFlags.SetProperty)!
                    .SetValue(p, System.Data.SqlDbType.Structured);
            }
            cmd.Parameters.Add(p);            
        }

        private IEnumerable<T> AfterEnumerable<T>(IEnumerable<T> input, Action? after, Action? @finally = null)
        {
            try
            {
                foreach(var item in input)
                {
                    yield return item;
                }
                if(after != null) after();
            }
            finally
            {
                if(@finally != null) @finally();
            }
        }
        private IEnumerable<T> AfterEnumerable<T>(IEnumerable<T> input, Action? after, IDisposable toDispose1, params IDisposable[] toDispose)
        {
            return AfterEnumerable(input, after, () => 
            {
                toDispose1.Dispose();
                foreach(var d in toDispose)
                {
                    d.Dispose();
                }
            });
        }

        protected IEnumerable<Dictionary<string, object?>> DictionaryFromReader(DbDataReader rdr)
        {
	        if (!rdr.HasRows) 
	        {
		        yield break;
	        }
	        int fieldCount = rdr.FieldCount;
	        while(rdr.Read())
	        {
                yield return ReadDictionary(rdr, fieldCount);
	        }
        }
{{Methods}}
	}

}