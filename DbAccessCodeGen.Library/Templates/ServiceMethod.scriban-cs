{{if ResultFields}}
protected readonly struct {{MethodName}}Ordinals
{
	{{ for res in ResultFields }}public readonly int {{ res.CSPropertyName }};
	{{ end }}	

	public {{MethodName}}Ordinals({{ for prop in ResultFields }}int {{prop.ParameterName}}{{if !for.last}}, {{ end }}{{ end }})
	{
		{{ for prop in ResultFields }}this.{{prop.CSPropertyName}} = {{prop.ParameterName}};
		{{ end }}		
	}
}

protected {{ResultType}} {{MethodName}}_FromRecord(IDataRecord row, in {{MethodName}}Ordinals ordinals) 
{
	return new {{ResultType}}(
		{{ for prop in ResultFields }}{{prop.ParameterName}}: {{prop.GetCode}}{{if !for.last}}, {{ end }}{{ end }}
		);
}
{{end}}
private void {{MethodName}}_PrepareCommand(DbCommand cmd{{if ParameterTypeName}}, {{ParameterTypeName}} parameters{{end}})
{
	cmd.CommandType = {{CommandType}};
	cmd.CommandText = "{{CommandText}}";{{
	for prop in Parameters }}
	{{if prop.IsTableValued}}this.AddTableValuedCommandParameter(cmd, "{{prop.SqlName}}", parameters.{{ prop.CSPropertyName }}, {{prop.TableValuedMeta}}, {{prop.TableValuedFn}});
	{{else}}this.AddCommandParameter(cmd, "{{prop.SqlName}}", parameters.{{ prop.CSPropertyName }}{{if prop.DefaultIfRequired}} ?? {{prop.DefaultIfRequired}}{{end}}, ParameterDirection.{{ prop.ParameterDirection }}{{if prop.SizeIfRequired}}, size: {{prop.SizeIfRequired}}{{end}});{{end}}{{ end }}{{
	for rp in ReplaceParameters}}
	this.AddCommandParameter(cmd, "{{rp.Key}}", {{rp.Value}});{{end}}
}
{{if GenerateAsyncStreamCode}}
{{if ParameterTypeName}}
public {{FullStreamAsyncResultType}} {{MethodName}}StreamAsync({{ for prop in Parameters }}{{prop.CompleteNetType}} {{prop.ParameterName}}, {{end}}[System.Runtime.CompilerServices.EnumeratorCancellation] CancellationToken cancellationToken = default)
{
	return {{MethodName}}StreamAsync(new {{ParameterTypeName}}({{ for prop in Parameters }}{{prop.ParameterName}}: {{prop.ParameterName}}{{if !for.last}}, {{ end }}
		{{end}}), cancellationToken);
}
{{end}}

public async {{FullStreamAsyncResultType}} {{MethodName}}StreamAsync({{if ParameterTypeName}} {{ParameterTypeName}} parameters{{end}},[System.Runtime.CompilerServices.EnumeratorCancellation] CancellationToken cancellationToken = default)
{
    using var cmd = connection.CreateCommand();
	await SetupConnectionAsync(cancellationToken);
	{{MethodName}}_PrepareCommand(cmd{{if ParameterTypeName}}, parameters{{end}});
	DateTime start = DateTime.UtcNow;
	OnCommandStart(cmd, start);
	using var rdr = await cmd.ExecuteReaderAsync(cancellationToken);
	if(!rdr.HasRows) 
	{
		yield break;
	}
	{{if ExecuteOnly}}
	var returnPrm = AddCommandParameter(cmd, "__returnvalue", 0, ParameterDirection.ReturnValue);
	int affectedRows = await cmd.ExecuteNonQueryAsync(cancellationToken); 
	int returnValue = (int)returnPrm.Value!;
	{{else}}{{if ReturnResult}}
	var ordinals = new {{MethodName}}Ordinals(
		{{ for prop in ResultFields }}{{prop.ParameterName}}: rdr.GetOrdinal("{{prop.SqlName}}") {{if !for.last}}, {{ end }}{{ end }}
	);
	{{else}}
	int fieldCount = rdr.FieldCount;
	{{end}}
	while(await rdr.ReadAsync(cancellationToken))
	{
		{{if ReturnResult}}yield return {{MethodName}}_FromRecord(rdr, ordinals);
		{{else}}yield return ReadDictionary(rdr, fieldCount);{{end}}
	}{{end}}
	OnCommandEnd(cmd, start);{{if ExecuteOnly}}
	return (affectedRows,returnValue);{{end}}
}
{{end}}
{{if (GenerateSyncCode || GenerateAsyncCode) && ReturnResult && !ExecuteOnly}} 
private {{FullSyncResultType}} {{MethodName}}_FromReader(DbDataReader rdr)
{
	if (!rdr.HasRows) 
	{
		yield break;
	}
	var ordinals = new {{MethodName}}Ordinals(
		{{ for prop in ResultFields }}{{prop.ParameterName}}: rdr.GetOrdinal("{{prop.SqlName}}") {{if !for.last}}, {{ end }}{{ end }}
	);
	while(rdr.Read())
	{
		yield return {{MethodName}}_FromRecord(rdr, in ordinals);
	}
}
{{end}}
{{if GenerateSyncCode}}
{{if ParameterTypeName}}
public {{FullSyncResultType}} {{MethodName}}({{ for prop in Parameters }}{{prop.CompleteNetType}} {{prop.ParameterName}}{{if !for.last}}, {{ end }}{{end}})
{
	return {{MethodName}}(new {{ParameterTypeName}}({{ for prop in Parameters }}{{prop.ParameterName}}: {{prop.ParameterName}}{{if !for.last}}, {{ end }}
	{{end}}));
}
{{end}}

public {{FullSyncResultType}} {{MethodName}}({{if ParameterTypeName}}{{ParameterTypeName}} parameters{{end}})
{
    var cmd = connection.CreateCommand();
	SetupConnection();
	{{MethodName}}_PrepareCommand(cmd{{if ParameterTypeName}}, parameters{{end}});
	DateTime start = DateTime.UtcNow;
	OnCommandStart(cmd, start);{{if ExecuteOnly}}
	var returnPrm = AddCommandParameter(cmd, "__returnvalue", 0, ParameterDirection.ReturnValue);
	int affectedRows = cmd.ExecuteNonQuery(); 
	int returnValue = (int)returnPrm.Value!;
	OnCommandEnd(cmd, start);
	return (affectedRows, returnValue);{{else}}
	var rdr = cmd.ExecuteReader();
	{{if ReturnReader}}return rdr;{{else}}
	var dt = {{if ReturnResult}}{{MethodName}}_FromReader(rdr){{else}}DictionaryFromReader(rdr){{end}};
	return AfterEnumerable(dt, () => OnCommandEnd(cmd, start), cmd, rdr);{{end}}{{end}}
}
{{end}}

{{if GenerateAsyncCode}}
{{if ParameterTypeName}}
public {{FullAsyncResultType}} {{MethodName}}Async({{ for prop in Parameters }}{{prop.CompleteNetType}} {{prop.ParameterName}}, {{end}}CancellationToken cancellationToken = default)
{
	return {{MethodName}}Async(new {{ParameterTypeName}}({{ for prop in Parameters }}{{prop.ParameterName}}: {{prop.ParameterName}}{{if !for.last}}, {{ end }}
	{{end}}), cancellationToken);
}
{{end}}

public async {{FullAsyncResultType}} {{MethodName}}Async({{if ParameterTypeName}}{{ParameterTypeName}} parameters, {{end}}CancellationToken cancellationToken = default)
{
    using var cmd = connection.CreateCommand();
	await SetupConnectionAsync(cancellationToken);
	{{MethodName}}_PrepareCommand(cmd{{if ParameterTypeName}}, parameters{{end}});
	DateTime start = DateTime.UtcNow;
	OnCommandStart(cmd, start);{{if ExecuteOnly}}
	var returnPrm = AddCommandParameter(cmd, "__returnvalue", 0, ParameterDirection.ReturnValue);
	int affectedRows = await cmd.ExecuteNonQueryAsync(cancellationToken); 
	int returnValue = (int)returnPrm.Value!;
	OnCommandEnd(cmd, start);
	return (affectedRows, returnValue);{{else}}
	var rdr = await cmd.ExecuteReaderAsync(cancellationToken);
	{{if ReturnReader}}return rdr;{{else}}
	var dt = {{if ReturnResult }}{{MethodName}}_FromReader(rdr){{else}}DictionaryFromReader(rdr){{end}};
	return AfterEnumerable(dt, () => OnCommandEnd(cmd, start), cmd, rdr);{{end}}{{end}}
}
{{end}}